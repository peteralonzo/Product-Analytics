DESC TABLE "DSC_PLDS_DB"."APP_AUTOMATA_PRD"."PREVAIL_AUTO_ULM_POL_PRD_AGG_VW";

SELECT *
FROM "DSC_PLDS_DB"."APP_AUTOMATA_PRD"."PREVAIL_AUTO_ULM_POL_PRD_AGG_VW"
WHERE CV_PLCY_PERIOD_ID = 1004465451 OR CV_PLCY_PERIOD_ID = 1000923602;

SELECT CONCAT(CF_REGIONAL_OFFICE_ORG_ID, PLCY_SYMBOL_CD, CF_PLCY_NBR) AS POL_ID, 
CF_POL_EFF_DT, 
CV_PLCY_PERIOD_ID,
BI_EXPOSURE * ADJ_BI_PP_PRED AS BI,
COLL_EXPOSURE * ADJ_COLL_PP_PRED AS COLL,
COMP_EXPOSURE * ADJ_COMP_PP_PRED AS COMP,
MP_EXPOSURE * ADJ_MP_PP_PRED AS MP,
PD_EXPOSURE * ADJ_PD_PP_PRED AS PD,
PIP_EXPOSURE * ADJ_PIP_PP_PRED AS PIP,
UM_EXPOSURE * ADJ_UM_PP_PRED AS UM,
(BI + COLL + COMP + MP + PD + PIP + UM) AS TTL
FROM "DSC_PLDS_DB"."APP_AUTOMATA_PRD"."PREVAIL_AUTO_ULM_POL_PRD_AGG_VW"
WHERE CV_PLCY_PERIOD_ID = 1004465451 OR CV_PLCY_PERIOD_ID = 1000923602;

-- Corrected ULM
WITH full_data AS
(
    SELECT 
    POL_ID,  
    POL_PRD_ID,               
    COV_TYPE_ABBR,              
    EARNED_MONTH,
    -- Calculates EE of a given row as a percentage
    DERIV_ADJ_EP_EXPSR_MO_CNT / 
    NULLIFZERO(SUM(DERIV_ADJ_EP_EXPSR_MO_CNT) 
    OVER (PARTITION BY POL_ID, POL_PRD_ID, COV_TYPE_ABBR)) AS EE_PERCENT,
    -- Mapping ULM scores to Auto Operational Loss Coverages
    CASE WHEN COV_TYPE_ABBR = 'BI'      
        THEN EE_PERCENT * ADJ_BI_PP_PRED * BI_EXPOSURE ELSE 0 END AS ADJ_BI_CTE,
    CASE WHEN COV_TYPE_ABBR = 'COLL'    
        THEN EE_PERCENT * ADJ_COLL_PP_PRED * COLL_EXPOSURE ELSE 0 END AS ADJ_COLL_CTE,
    CASE WHEN COV_TYPE_ABBR = 'COMP'    
        THEN EE_PERCENT * ADJ_COMP_PP_PRED * COMP_EXPOSURE ELSE 0 END AS ADJ_COMP_CTE,             
    CASE WHEN COV_TYPE_ABBR = 'MED'     
        THEN EE_PERCENT * ADJ_MP_PP_PRED * MP_EXPOSURE ELSE 0 END AS ADJ_MP_CTE,                 
    CASE WHEN COV_TYPE_ABBR = 'PD'      
        THEN EE_PERCENT * ADJ_PD_PP_PRED * PD_EXPOSURE ELSE 0 END AS ADJ_PD_CTE,                   
    CASE WHEN COV_TYPE_ABBR = 'PIP'     
        THEN EE_PERCENT * ADJ_PIP_PP_PRED * PIP_EXPOSURE ELSE 0 END AS ADJ_PIP_CTE,                
    CASE WHEN COV_TYPE_ABBR = 'UMBI'      
        THEN EE_PERCENT * ADJ_UM_PP_PRED * UM_EXPOSURE ELSE 0 END AS ADJ_UM_CTE,                
    (ADJ_BI_CTE + ADJ_COLL_CTE + ADJ_COMP_CTE + 
    ADJ_MP_CTE + ADJ_PD_CTE + ADJ_PIP_CTE + ADJ_UM_CTE) AS ADJ_TTL_CTE
    FROM "DSC_PLBI_DB"."APP_AUTO_PRD"."AUTO_OPERATIONAL_LOSS" AS AUTO_OP_LOSS
    JOIN "DSC_PLDS_DB"."APP_AUTOMATA_PRD"."PREVAIL_AUTO_ULM_POL_PRD_AGG_VW" AS ULM_AUTO
    ON CAST(AUTO_OP_LOSS.POL_PRD_ID AS VARCHAR) = CAST(ULM_AUTO.CV_PLCY_PERIOD_ID AS VARCHAR)
    WHERE POL_PRD_ID IS NOT NULL
    ORDER BY POL_ID, POL_PRD_ID, COV_TYPE_ABBR, EARNED_MONTH
),

agg_auto_loss AS
(
    SELECT POL_PRD_ID,
    SUM(ADJ_BI_CTE) AS BI_OP,
    SUM(ADJ_COLL_CTE) AS COLL_OP,
    SUM(ADJ_COMP_CTE) AS COMP_OP,
    SUM(ADJ_MP_CTE) AS MP_OP,
    SUM(ADJ_PD_CTE) AS PD_OP,
    SUM(ADJ_PIP_CTE) AS PIP_OP,
    SUM(ADJ_UM_CTE) AS UM_OP,
    SUM(ADJ_TTL_CTE) AS TTL_OP
    FROM full_data
    GROUP BY POL_PRD_ID
),

agg_ulm AS
(
    SELECT 
    B.CV_PLCY_PERIOD_ID,
    ADJ_BI_PP_PRED * BI_EXPOSURE AS BI_ULM,
    ADJ_COLL_PP_PRED * COLL_EXPOSURE AS COLL_ULM,
    ADJ_COMP_PP_PRED * COMP_EXPOSURE AS COMP_ULM,
    ADJ_MP_PP_PRED * MP_EXPOSURE AS MP_ULM,
    ADJ_PD_PP_PRED * PD_EXPOSURE AS PD_ULM,
    ADJ_PIP_PP_PRED * PIP_EXPOSURE AS PIP_ULM,
    ADJ_UM_PP_PRED * UM_EXPOSURE AS UM_ULM,
    (BI_ULM + COLL_ULM + COMP_ULM + MP_ULM + PD_ULM + PIP_ULM + UM_ULM) AS TTL_ULM
    FROM "DSC_PLDS_DB"."APP_AUTOMATA_PRD"."PREVAIL_AUTO_ULM_POL_PRD_AGG_VW" B
)

-- SELECT * FROM full_data WHERE POL_PRD_ID IN (1004465451, 1000923602)

SELECT AL.POL_PRD_ID,
BI_OP, BI_ULM,
COLL_OP, COLL_ULM,
COMP_OP, COMP_ULM,
MP_OP, MP_ULM,
PD_OP, PD_ULM,
PIP_OP, PIP_ULM,
UM_OP, UM_ULM,
TTL_OP, TTL_ULM
FROM agg_auto_loss AL JOIN agg_ulm AU
ON TO_VARCHAR(AL.POL_PRD_ID) = TO_VARCHAR(AU.CV_PLCY_PERIOD_ID)
-- WHERE POL_PRD_ID IN (1004465451, 1000923602)

-- WHERE ABS(BI_OP - BI_ULM) > 0.02
-- OR ABS(COLL_OP - COLL_ULM) > 0.02
-- OR ABS(COMP_OP - COMP_ULM) > 0.02
-- OR ABS(MP_OP - MP_ULM) > 0.02
-- OR ABS(PD_OP - PD_ULM) > 0.02
-- OR ABS(PIP_OP - PIP_ULM) > 0.02
-- OR ABS(UM_OP - UM_ULM) > 0.02

WHERE ABS(BI_OP - BI_ULM) <= 0.02
AND ABS(COLL_OP - COLL_ULM) <= 0.02
AND ABS(COMP_OP - COMP_ULM) <= 0.02
AND ABS(MP_OP - MP_ULM) <= 0.02
AND ABS(PD_OP - PD_ULM) <= 0.02
AND ABS(PIP_OP - PIP_ULM) <= 0.02
AND ABS(UM_OP - UM_ULM) <= 0.02

------------
-- Ticket for Kala

-- RITM4920221 - ULM fields - 2 parts
-- 1) Calculates EE of a given row as a percentage
AA.DERIV_ADJ_EP_EXPSR_MO_CNT / NULLIFZERO(SUM(AA.DERIV_ADJ_EP_EXPSR_MO_CNT) OVER (PARTITION BY AA.POL_ID, AA.POL_PRD_ID, AA.COV_TYPE_ABBR)) AS EE_PERCENT,
            
-- 2) Maps ULM scores to the Coverages
CASE 
    WHEN AA.COV_TYPE_ABBR = 'BI' 
        THEN ROUND(EE_PERCENT * JJ.ADJ_BI_PP_PRED * JJ.BI_EXPOSURE,4) 
    ELSE 0 
END AS ULM_BI_COV_PURE_PREM_AMT,
CASE 
    WHEN AA.COV_TYPE_ABBR = 'COLL' 
        THEN ROUND(EE_PERCENT * JJ.ADJ_COLL_PP_PRED * JJ.COLL_EXPOSURE,4) 
    ELSE 0 
END AS ULM_COLL_COV_PURE_PREM_AMT,
CASE 
    WHEN AA.COV_TYPE_ABBR = 'COMP' 
        THEN ROUND(EE_PERCENT * JJ.ADJ_COMP_PP_PRED * JJ.COMP_EXPOSURE,4) 
    ELSE 0 
END AS ULM_COMP_COV_PURE_PREM_AMT,
CASE 
    WHEN AA.COV_TYPE_ABBR = 'MED' 
        THEN ROUND(EE_PERCENT * JJ.ADJ_MP_PP_PRED * JJ.MP_EXPOSURE,4) 
    ELSE 0 
END AS ULM_MEDPAY_COV_PURE_PREM_AMT,
CASE 
    WHEN AA.COV_TYPE_ABBR = 'PD' 
        THEN ROUND(EE_PERCENT * JJ.ADJ_PD_PP_PRED * JJ.PD_EXPOSURE,4) 
    ELSE 0 
END AS ULM_PD_COV_PURE_PREM_AMT,
CASE 
    WHEN AA.COV_TYPE_ABBR = 'PIP' 
        THEN ROUND(EE_PERCENT * JJ.ADJ_PIP_PP_PRED * JJ.PIP_EXPOSURE,4) 
    ELSE 0 
END AS ULM_PIP_COV_PURE_PREM_AMT,
CASE 
    WHEN AA.COV_TYPE_ABBR = 'UMBI' 
        THEN ROUND(EE_PERCENT * JJ.ADJ_UM_PP_PRED * JJ.UM_EXPOSURE,4) 
    ELSE 0 
END AS ULM_UM_COV_PURE_PREM_AMT,
    	    
(
    ZEROIFNULL(ULM_BI_COV_PURE_PREM_AMT) + ZEROIFNULL(ULM_COLL_COV_PURE_PREM_AMT) + ZEROIFNULL(ULM_COMP_COV_PURE_PREM_AMT) + 
    ZEROIFNULL(ULM_MEDPAY_COV_PURE_PREM_AMT) + ZEROIFNULL(ULM_PD_COV_PURE_PREM_AMT) + ZEROIFNULL(ULM_PIP_COV_PURE_PREM_AMT) + 
    ZEROIFNULL(ULM_UM_COV_PURE_PREM_AMT)
) AS ULM_TTL_COV_PURE_PREM_AMT 